if [ -z "$testbin" ]; then
  echo Environment not configured. Set testbin to directory with test scripts. Exiting...
  exit 1 
fi

if [ -z "$ttadmin_home" ]; then
	export ttadmin_home=$testbin
fi

. $testbin/common.h; . $testbin/test.h

readcfg failover.env
ttVersion=$(getTTVersion)

#Parse parameters. echo pair of '-parameter value' will be executed as 'parameter=value'. Parameter will be available in script as $parameter
eval $(echo $@ | sed "s/ -/;/g" | sed "s/^-//" | tr ' ' '=')

echo "$0 $@" >$testId.log

trap stop SIGHUP SIGINT SIGTERM SIGQUIT SIGSTOP

rm control &>/dev/null
mkfifo control &>/dev/null

if [ ! -d "$tmp" ]; then tmp=/tmp; fi
#rm $tmp/*$testId* >/dev/null 2>&1
echoTab "Removing previous logs"
for ext in err exc exp@* log msg out
do
	echo -n "$ext "
	rm $testId.[0-9][0-9]*.$ext >/dev/null 2>&1
done
echo OK


ttDeleteLogsInSystem

if [ "$startapp" != "NO" ]; then
 step=0

 #copying tt libraries from current installation will overwrite jars packed into ttclientfailover.jar on development system
 #if [ ! -d $testbin/lib ]; then mkdir $testbin/lib; fi
 #eval $(ttversion -m)
 #rm -f ../testbin/lib/*
 #cp $effective_insthome/lib/*.jar $testbin/lib

 #copy latest jar if executed on dev system
 if [ -f $testbin/../dist/ttclientfailover.jar ]; then
   cp $testbin/../dist/ttclientfailover.jar $testbin
 fi
 
 java $JAVA_OPTS -jar $testbin/ttclientfailover.jar $testId < control >$testId.log 2>$testId.err &
fi

